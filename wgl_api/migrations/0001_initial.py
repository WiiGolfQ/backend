# Generated by Django 5.0.1 on 2024-01-19 18:26

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Game',
            fields=[
                ('game_id', models.AutoField(primary_key=True, serialize=False)),
                ('game_name', models.CharField(max_length=64)),
                ('speedrun', models.BooleanField(default=True)),
                ('require_livestream', models.BooleanField(default=True)),
                ('best_of', models.SmallIntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Elo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('elo', models.DecimalField(decimal_places=1, max_digits=5)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wgl_api.game')),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('match_id', models.AutoField(primary_key=True, serialize=False)),
                ('timestamp_started', models.DateTimeField(auto_now_add=True)),
                ('timestamp_finished', models.DateTimeField(null=True)),
                ('player_1_video_url', models.URLField(blank=True, null=True)),
                ('player_2_video_url', models.URLField(blank=True, null=True)),
                ('status', models.CharField(choices=[('C', 'Cancelled'), ('D', 'Result contested'), ('F', 'Finished'), ('O', 'Ongoing')], max_length=1)),
                ('contest_reason', models.CharField(blank=True, max_length=64, null=True)),
                ('result', models.CharField(blank=True, choices=[('1', 'Player 1'), ('2', 'Player 2'), ('D', 'Draw')], max_length=1, null=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wgl_api.game')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('player_id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(blank=True, max_length=64, unique=True)),
                ('discord_id', models.BigIntegerField(unique=True)),
                ('created_timestamp', models.DateTimeField(auto_now_add=True)),
                ('last_active_timestamp', models.DateTimeField(auto_now_add=True)),
                ('stream_platform', models.CharField(choices=[('twitch', 'Twitch'), ('youtube', 'YouTube')], max_length=7, null=True)),
                ('stream_username', models.CharField(max_length=64, null=True)),
                ('accept_challenges', models.BooleanField(default=True)),
                ('banned', models.BooleanField(default=False)),
                ('currently_playing_match', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='wgl_api.match')),
                ('elos', models.ManyToManyField(through='wgl_api.Elo', to='wgl_api.game')),
            ],
        ),
        migrations.AddField(
            model_name='match',
            name='player_1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_1', to='wgl_api.player'),
        ),
        migrations.AddField(
            model_name='match',
            name='player_2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_2', to='wgl_api.player'),
        ),
        migrations.AddField(
            model_name='game',
            name='players_in_queue',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='wgl_api.player'),
        ),
        migrations.AddField(
            model_name='elo',
            name='player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wgl_api.player'),
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('challenge_id', models.AutoField(primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('accepted', models.BooleanField(null=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wgl_api.game')),
                ('challenged', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenged', to='wgl_api.player')),
                ('challenger', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenger', to='wgl_api.player')),
            ],
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('score_id', models.AutoField(primary_key=True, serialize=False)),
                ('score', models.IntegerField()),
                ('video_url', models.URLField(null=True)),
                ('verified', models.BooleanField(default=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wgl_api.game')),
                ('match', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='wgl_api.match')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wgl_api.player')),
            ],
        ),
        migrations.AddField(
            model_name='match',
            name='player_1_score',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='player_1_score', to='wgl_api.score'),
        ),
        migrations.AddField(
            model_name='match',
            name='player_2_score',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='player_2_score', to='wgl_api.score'),
        ),
        migrations.AddConstraint(
            model_name='match',
            constraint=models.UniqueConstraint(fields=('player_1', 'player_2'), name='players are unique'),
        ),
    ]
